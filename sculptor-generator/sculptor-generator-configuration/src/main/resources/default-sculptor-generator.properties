
db.product=hsqldb-inmemory
#db.product=mysql
#db.product=oracle
#db.product=postgresql
#db.product=custom

# Maximum length of names such as tables, columns, index, foreign keys...
# It is actually 64, but constraint name prefix takes 3
db.mysql.maxNameLength=61
db.mysql.hibernate.dialect=org.hibernate.dialect.MySQLDialect
# If true then database will do cascaded delete of children when deleting parent (one-to-many relation),
# otherwise Hibernate will perform the delete of the children
db.mysql.onDeleteCascade=true
# Mappings from Java types to MySQL database types
db.mysql.type.Boolean=CHAR(1)
db.mysql.type.boolean=CHAR(1)
db.mysql.type.Integer=INTEGER
db.mysql.type.int=INTEGER
db.mysql.type.Long=BIGINT
db.mysql.type.long=BIGINT
db.mysql.type.IDTYPE=BIGINT
db.mysql.type.Date=DATE
db.mysql.type.DateTime=DATETIME
db.mysql.type.Timestamp=TIMESTAMP
db.mysql.type.AuditableDateTime=TIMESTAMP
db.mysql.type.BigDecimal=DOUBLE
db.mysql.type.BigInteger=BIGINT
db.mysql.type.Double=DOUBLE
db.mysql.type.double=DOUBLE
db.mysql.type.Float=FLOAT
db.mysql.type.float=FLOAT
db.mysql.type.String=VARCHAR
db.mysql.length.String=100
db.mysql.type.UUID=VARCHAR
db.mysql.length.UUID=36
db.mysql.type.Enum=VARCHAR
db.mysql.length.Enum=40
db.mysql.type.Clob=CLOB
db.mysql.type.Blob=BLOB
db.mysql.type.discriminatorType.STRING=VARCHAR
db.mysql.length.discriminatorType.STRING=31
db.mysql.type.discriminatorType.CHAR=CHAR(1)
db.mysql.type.discriminatorType.INTEGER=INTEGER

# Maximum length of names such as tables, columns, index, foreign keys...
# It is actually 30, but constraint name prefix takes 3
db.oracle.maxNameLength=27
db.oracle.hibernate.dialect=org.hibernate.dialect.Oracle10gDialect
# If true then database will do cascaded delete of children when deleting parent (one-to-many relation),
# otherwise Hibernate will perform the delete of the children
db.oracle.onDeleteCascade=true
# Mappings from Java types to Oracle database types
db.oracle.type.Boolean=CHAR(1)
db.oracle.type.boolean=CHAR(1)
db.oracle.type.Integer=NUMBER
db.oracle.length.Integer=10
db.oracle.type.int=NUMBER
db.oracle.length.int=10
db.oracle.type.Long=NUMBER
db.oracle.length.Long=19
db.oracle.type.long=NUMBER
db.oracle.length.long=19
db.oracle.type.IDTYPE=NUMBER
db.oracle.length.IDTYPE=19
db.oracle.type.Date=DATE
db.oracle.type.DateTime=DATE
db.oracle.type.Timestamp=DATE
db.oracle.type.AuditableDateTime=DATE
db.oracle.type.BigDecimal=NUMBER
db.oracle.type.BigInteger=NUMBER
db.oracle.type.Double=NUMBER
db.oracle.type.double=NUMBER
db.oracle.type.Float=NUMBER
db.oracle.type.float=NUMBER
db.oracle.type.String=VARCHAR2
db.oracle.length.String=100
db.oracle.type.UUID=VARCHAR2
db.oracle.length.UUID=36
db.oracle.type.Enum=VARCHAR2
db.oracle.length.Enum=40
db.oracle.type.Clob=CLOB
db.oracle.type.Blob=BLOB
db.oracle.type.discriminatorType.STRING=VARCHAR2
db.oracle.length.discriminatorType.STRING=31
db.oracle.type.discriminatorType.CHAR=CHAR(1)
db.oracle.type.discriminatorType.INTEGER=NUMBER
db.oracle.length.discriminatorType.INTEGER=10

# Maximum length of names such as tables, columns, index, foreign keys...
# It is actually 64, but constraint name prefix takes 3
db.hsqldb-inmemory.maxNameLength=61
db.hsqldb-inmemory.hibernate.dialect=org.sculptor.framework.persistence.SculptorHsqlDialect
# If true then database will do cascaded delete of children when deleting parent (one-to-many relation),
# otherwise Hibernate will perform the delete of the children
db.hsqldb-inmemory.onDeleteCascade=true
# Mappings from Java types to hsqldb-inmemory database types
db.hsqldb-inmemory.type.Boolean=CHAR(1)
db.hsqldb-inmemory.type.boolean=CHAR(1)
db.hsqldb-inmemory.type.Integer=INTEGER
db.hsqldb-inmemory.type.int=INTEGER
db.hsqldb-inmemory.type.Long=BIGINT
db.hsqldb-inmemory.type.long=BIGINT
db.hsqldb-inmemory.type.IDTYPE=BIGINT
db.hsqldb-inmemory.type.Date=DATE
db.hsqldb-inmemory.type.DateTime=DATETIME
db.hsqldb-inmemory.type.Timestamp=TIMESTAMP
db.hsqldb-inmemory.type.AuditableDateTime=TIMESTAMP
db.hsqldb-inmemory.type.BigDecimal=DOUBLE
db.hsqldb-inmemory.type.BigInteger=BIGINT
db.hsqldb-inmemory.type.Double=DOUBLE
db.hsqldb-inmemory.type.double=DOUBLE
db.hsqldb-inmemory.type.Float=FLOAT
db.hsqldb-inmemory.type.float=FLOAT
db.hsqldb-inmemory.type.String=VARCHAR
db.hsqldb-inmemory.length.String=100
db.hsqldb-inmemory.type.UUID=VARCHAR
db.hsqldb-inmemory.length.UUID=36
db.hsqldb-inmemory.type.Enum=VARCHAR
db.hsqldb-inmemory.length.Enum=40
db.hsqldb-inmemory.type.Clob=LONGVARCHAR
db.hsqldb-inmemory.type.Blob=LONGVARBINARY
db.hsqldb-inmemory.type.discriminatorType.STRING=VARCHAR
db.hsqldb-inmemory.length.discriminatorType.STRING=31
db.hsqldb-inmemory.type.discriminatorType.CHAR=CHAR(1)
db.hsqldb-inmemory.type.discriminatorType.INTEGER=INTEGER

# Maximum length of names such as tables, columns, index, foreign keys...
# It is actually 63, but constraint name prefix takes 3
db.postgresql.maxNameLength=60
db.postgresql.hibernate.dialect=org.sculptor.framework.persistence.SculptorPostgreSql10Dialect
# If true then database will do cascaded delete of children when deleting parent (one-to-many relation),
# otherwise Hibernate will perform the delete of the children
db.postgresql.onDeleteCascade=false
# Mappings from Java types to Oracle database types
db.postgresql.type.Boolean=BOOLEAN
db.postgresql.type.boolean=BOOLEAN
db.postgresql.type.Integer=INTEGER
#db.postgresql.length.Integer=10
db.postgresql.type.int=INTEGER
#db.postgresql.length.int=10
db.postgresql.type.Long=BIGINT
#db.postgresql.length.Long=19
db.postgresql.type.long=BIGINT
#db.postgresql.length.long=19
db.postgresql.type.IDTYPE=BIGINT
db.postgresql.type.Date=TIMESTAMP
db.postgresql.type.DateTime=TIMESTAMP
db.postgresql.type.Timestamp=TIMESTAMP
db.postgresql.type.AuditableDateTime=TIMESTAMP
db.postgresql.type.BigDecimal=DOUBLE PRECISION
db.postgresql.type.BigInteger=BIGINT
db.postgresql.type.Double=DOUBLE PRECISION
db.postgresql.type.double=DOUBLE PRECISION
db.postgresql.type.Float=REAL
db.postgresql.type.float=REAL
db.postgresql.type.String=VARCHAR
db.postgresql.length.String=100
db.postgresql.type.UUID=VARCHAR
db.postgresql.length.UUID=36
db.postgresql.type.Enum=VARCHAR
db.postgresql.length.Enum=40
db.postgresql.type.Clob=TEXT
db.postgresql.type.Blob=OID
db.postgresql.type.discriminatorType.STRING=VARCHAR
db.postgresql.length.discriminatorType.STRING=31
db.postgresql.type.discriminatorType.CHAR=CHAR(1)
db.postgresql.type.discriminatorType.INTEGER=INTEGER
#db.postgresql.length.discriminatorType.INTEGER=10

# needed for inheritance type SINGLE_TABLE (JPA defaults)
db.discriminatorColumnName=DTYPE
# database names with underscore, converts camel case to underscore
db.useUnderscoreNaming=false
# foreign key columns ends with _ID
db.useIdSuffixInForeigKey=false
# prefix ID column with table name
db.useTablePrefixedIdColumn=false
# don't truncate, throw exception instead
db.errorWhenTooLongName=false

# Mapping from model types to Java types
# You can modify defaults by generator property 'datetime.library=[legacy,joda]'
# Check PropertyBase.java initDerivedDefaultsForLegacyDate and initDerivedDefaultsForJoda
javaType.Date=java.time.LocalDate
javaType.DateTime=java.time.LocalDateTime
javaType.Timestamp=java.time.Instant
javaType.AuditableDateTime=java.time.LocalDateTime

javaType.BigDecimal=java.math.BigDecimal
javaType.BigInteger=java.math.BigInteger
javaType.Map=java.util.Map
javaType.impl.Map=java.util.HashMap
javaType.List=java.util.List
javaType.impl.List=java.util.ArrayList
javaType.Bag=java.util.List
javaType.impl.Bag=java.util.ArrayList
javaType.Set=java.util.Set
javaType.impl.Set=java.util.HashSet
javaType.Collection=java.util.Collection
javaType.impl.Collection=java.util.HashSet
javaType.AssociationSpecification=org.sculptor.framework.domain.AssociationSpecification
javaType.Key=com.google.appengine.api.datastore.Key
javaType.PagingParameter=org.sculptor.framework.domain.PagingParameter
javaType.PagedResult=org.sculptor.framework.domain.PagedResult
javaType.UUID=String
javaType.IDTYPE=Long
javaType.Blob=byte[]
javaType.Clob=String
javaType.ApplicationException=org.sculptor.framework.errorhandling.ApplicationException
javaType.Tuple=javax.persistence.Tuple

# Java types used for REST support (request parameter)
javaType.Model=org.springframework.ui.Model
javaType.ModelMap=org.springframework.ui.ModelMap
javaType.BindingResult=org.springframework.validation.BindingResult
javaType.HttpServletRequest=javax.servlet.http.HttpServletRequest
javaType.HttpServletResponse=javax.servlet.http.HttpServletResponse
javaType.HttpSession=javax.servlet.http.HttpSession
javaType.WebRequest=org.springframework.web.context.request.WebRequest
javaType.Locale=java.util.Locale
javaType.ModelAndView=org.springframework.web.servlet.ModelAndView

# No temporals necessary by default, supported by new JPA
# You can modify defaults by generator property 'datetime.library=[legacy,joda]'
# Check PropertyBase.java initDerivedDefaultsForLegacyDate and initDerivedDefaultsForJoda
#hibernateType.Date=
#hibernateType.DateTime=
#hibernateType.Timestamp=
#hibernateType.AuditableDateTime=

propertyEditor.Date=org.springframework.beans.propertyeditors.CustomDateEditor(new java.text.SimpleDateFormat(getMessagesAccessor().getMessage("format.DatePattern", "yyyy-MM-dd")), true)
propertyEditor.DateTime=org.springframework.beans.propertyeditors.CustomDateEditor(new java.text.SimpleDateFormat(getMessagesAccessor().getMessage("format.DateTimePattern", "yyyy-MM-dd HH:mm")), true)
propertyEditor.Timestamp=org.springframework.beans.propertyeditors.CustomDateEditor(new java.text.SimpleDateFormat(getMessagesAccessor().getMessage("format.DateTimePattern", "yyyy-MM-dd HH:mm")), true)
propertyEditor.boolean=org.springframework.beans.propertyeditors.CustomBooleanEditor(getMessagesAccessor().getMessage("format.booleanTrue", "yes"), getMessagesAccessor().getMessage("format.booleanFalse", "no"), true)
propertyEditor.Boolean=org.springframework.beans.propertyeditors.CustomBooleanEditor(getMessagesAccessor().getMessage("format.booleanTrue", "yes"), getMessagesAccessor().getMessage("format.booleanFalse", "no"), true)

id.type=IDTYPE

notChangeablePropertySetter.visibility=private
#notChangeablePropertySetter.visibility=protected
notChangeableReferenceSetter.visibility=public

package.serviceInterface=serviceapi
package.serviceImplementation=serviceimpl
package.serviceProxy=serviceproxy
package.consumer=consumer
package.rest=rest
package.xmlmapper=consumer
package.domain=domain
package.commandEvent=domain
package.domainEvent=domain
package.repositoryInterface=domain
package.exception=exception
package.repositoryImplementation=repositoryimpl
package.accessInterface=accessimpl
package.accessImplementation=accessimpl
package.dto=serviceapi

naming.suffix.Impl=Impl

genericAccessObjectStrategy.findById=org.sculptor.generator.util.GenericAccessObjectManager$FindByIdStrategy
genericAccessObjectStrategy.findAll=org.sculptor.generator.util.GenericAccessObjectManager$FindAllStrategy
genericAccessObjectStrategy.countAll=org.sculptor.generator.util.GenericAccessObjectManager$CountAllStrategy
genericAccessObjectStrategy.findByExample=org.sculptor.generator.util.GenericAccessObjectManager$FindByExampleStrategy
genericAccessObjectStrategy.findByQuery=org.sculptor.generator.util.GenericAccessObjectManager$FindByQueryStrategy
genericAccessObjectStrategy.merge=org.sculptor.generator.util.GenericAccessObjectManager$MergeStrategy
genericAccessObjectStrategy.save=org.sculptor.generator.util.GenericAccessObjectManager$SaveStrategy
genericAccessObjectStrategy.delete=org.sculptor.generator.util.GenericAccessObjectManager$DeleteStrategy
genericAccessObjectStrategy.findByKey=org.sculptor.generator.util.GenericAccessObjectManager$FindByKeyStrategy
genericAccessObjectStrategy.findByKeys=org.sculptor.generator.util.GenericAccessObjectManager$FindByKeysStrategy
genericAccessObjectStrategy.findByCriteria=org.sculptor.generator.util.GenericAccessObjectManager$FindByCriteriaStrategy
genericAccessObjectStrategy.findByCriteriaQuery=org.sculptor.generator.util.GenericAccessObjectManager$FindByCriteriaQueryStrategy
genericAccessObjectStrategy.findByCondition=org.sculptor.generator.util.GenericAccessObjectManager$FindByConditionStrategy
genericAccessObjectStrategy.findByConditionAs=org.sculptor.generator.util.GenericAccessObjectManager$FindByConditionAsStrategy
genericAccessObjectStrategy.findByConditionStat=org.sculptor.generator.util.GenericAccessObjectManager$FindByConditionStatStrategy
genericAccessObjectStrategy.findByConditionTuple=org.sculptor.generator.util.GenericAccessObjectManager$FindByConditionTupleStrategy
genericAccessObjectStrategy.populateAssociations=org.sculptor.generator.util.GenericAccessObjectManager$PopulateAssociationsStrategy

cache.provider=EhCache
#cache.provider=JCache
#cache.provider=JbossTreeCache
#cache.provider=DeployedTreeCache
#cache.provider=TreeCache
#cache.provider=DataNucleus.weak
#cache.provider=DataNucleus.soft
#cache.provider=Infinispan

ejb.version=3

# The main capabilities/responsibilities of the project, can be several comma separated
project.nature=business-tier
#project.nature=business-tier, pure-ejb3

# Specifies which parts to generate,
# the values are typically derived from more coarse grained properties, such as project.nature
generate.domainObject=true
generate.domainObject.nameConstants=false
generate.domainObject.conditionalCriteriaProperties=true
generate.domainObject.compositeKeyClass=true
generate.exception=true
generate.NotFoundException=true
generate.repository=true
generate.repository.finders=false
generate.service=true
generate.service.proxy=true
generate.consumer=true
generate.resource=true
generate.restWeb=true
generate.restWeb.config=true
generate.restWeb.config.springboot=false
generate.restWeb.jsp=true
generate.spring=true
generate.hibernate=true
generate.ddl=false
generate.ddl.drop=true
generate.datasource=false
generate.logbackConfig=true
generate.umlgraph=true
generate.umlgraph.enum=false
generate.umlgraph.basicType=false
generate.modeldoc=true
generate.singleLevelFetchEager=false
# specifies if ServiceContext is to be generated
generate.serviceContext=true
generate.auditable=true
generate.auditable.joda=false
generate.auditable.legacy=false
# All repositories extend this class
repository.extends=
# All services extend this class
service.extends=
# All resources extend this class
resource.extends=
# All DomainObjects of specific type extends the defined class
#entity.extends=
#valueObject.extends=
#dataTransferObject.extends=
#basicType.extends=
#domainEvent.extends=
#commandEvent.extends=

generate.gapClass=false
generate.jpa.annotation=true
# generate annotations on fields or getters
generate.jpa.annotation.onField=true
# generate annotations for database definition of column type
generate.jpa.annotation.columnDefinition=false
generate.validation.annotation=true
generate.validation.annotation.dataTransferObject=false
generate.spring.annotation.tx=false
generate.spring.dataSourceSupport=false
generate.xml.bind.annotation=true
generate.xml.bind.annotation.dataTransferObject=true
generate.xml.bind.annotation.valueObject=false
generate.xml.bind.annotation.entity=false
generate.xml.bind.annotation.basicType=false
generate.xml.bind.annotation.domainEvent=false
generate.xml.bind.annotation.commandEvent=false
generate.xstream.annotation=false
generate.fullAuditable=false
generate.injectDrools=false
generate.parameterName=false
generate.optimisticLocking=true
generate.pubSub=true
generate.springRemoting=false
generate.quick=false

# Skip generation of a named module by defining it like this.
#generate.module.foo=false

spring.remoting.type=rmi
#spring.remoting.type=hessian
#spring.remoting.type=httpInvoker

jpa.provider=hibernate
#jpa.provider=eclipselink
#jpa.provider=datanucleus
#jpa.provider=appengine
#jpa.provider=openjpa
#jpa.provider=none

# name of META-INF/persistence.xml file
jpa.persistenceXmlFile=META-INF/persistence.xml

# generate annotations a minimum of jpa annotation (use defaults)
jpa.useJpaDefaults=false

nosql.provider=none
#nosql.provider=mongoDb

# Naming of generic access object
# By defining the following properties you can use your own
# implementation of all generic access objects.
#framework.accessimpl.package=org.mypkg.accessimpl
#framework.accessimpl.prefix=
#framework.accessapi.package=org.mypkg.accessapi
# In case you use use jpa.provider=hibernate but want to use pure Jpa you can define the following:
#framework.accessimpl.prefix=Jpa
#framework.accessimpl.package=org.sculptor.framework.accessimpl.jpa
# It is also possible to replace a single implementation like this
#framework.accessimpl.SaveAccessImpl=org.mypkg.accessimpl.SaveAccessImpl
#framework.accessapi.SaveAccess=org.mypkg.accessapi.SaveAccess

# Base class for access objects
framework.accessimpl.AccessBase=org.sculptor.framework.accessimpl.jpa.JpaAccessBase
framework.accessimpl.AccessBaseWithException=org.sculptor.framework.accessimpl.jpa.JpaAccessBaseWithException
framework.accessimpl.FindByConditionAsAccessImpl=org.sculptor.framework.accessimpl.jpa.JpaFindByConditionAccessImpl
framework.accessapi.FindByConditionAsAccess=org.sculptor.framework.accessapi.FindByConditionAccess

# only hibernate is supported
validation.version=1.0
validation.provider=hibernate

deployment.type=war
#deployment.type=ear

deployment.applicationServer=Jetty
#deployment.applicationServer=JBoss
#deployment.applicationServer=Tomcat
#deployment.applicationServer=AppEngine

# You can define deployment.earname to be used in ejb proxy classes
#deployment.earname=myapp

scaffold.operations=findById,findAll,save,delete
findAll.paging=false
findByCondition.paging=false
findByConditionAs.paging=false
findByConditionTuple.paging=false
findByConditionStat.paging=false

# Defines what attributes on domain objects that are system attributes, i.e. shoud be left untouch by user code
systemAttributes=id,uuid,version,createdBy,createdDate,updatedBy,updatedDate,lastUpdated,lastUpdatedBy
auditableAttributes=createdBy,createdDate,updatedBy,updatedDate,lastUpdated,lastUpdatedBy

# Attributes defined by system that should appear last in attribute listings, such as in DDL
systemAttributesToPutLast=version,createdBy,createdDate,updatedBy,updatedDate,lastUpdated,lastUpdatedBy

# Date and time implementation
datetime.library=java
#datetime.library=joda

# Which type of entityManagerFactory to generate, 'scan' or 'static'
generate.entityManagerFactoryType=scan

# Generate short descriptions for property comments (default long)
generate.shortPropertyComment=false

dataSource.maximumPoolSize=40
dataSource.connectionTimeout=5000
dataSource.leakDetectionThreshold=15000

vendorAdapter.showSql=!false
vendorAdapter.generateDdl=!false

################################################################################
# Test specific properties
################################################################################
generate.test=true
generate.test.dbunitTestData=true
generate.test.emptyDbunitTestData=true
# Number of rows with all fields generated (required and also optional)
generate.test.dbunitTestDataRows.full=2
# Number of rows with optional fields generated only when probability is met
generate.test.dbunitTestDataRows.mixed=3
generate.test.dbunitTestDataRows.mixed.probability=80
# Number of rows with required fields only (optional fields are skipped)
generate.test.dbunitTestDataRows.minimal=1
generate.test.dbunitTestDataIdBase=100

# Only junit is supported
test.provider=junit
test.db.product=hsqldb-inmemory
# Define the following property to use a specific data set file
# instead of one for each test
#test.dbunit.dataSetFile=dbunit/ReferenceData.xml

# Which type of entityManagerFactory to generate for test, 'scan' or 'static'
test.generate.entityManagerFactoryType=scan

test.dataSource.maximumPoolSize=5
test.dataSource.connectionTimeout=2000
test.dataSource.leakDetectionThreshold=5000

test.vendorAdapter.showSql=!false
test.vendorAdapter.generateDdl=!true

# Special mapping for converting attribute names to plural
singular2plural.criterion=criteria
singular2plural.matrix=matrices

javaHeader=\
    Header for your files. You can define your own custom header as 'javaHeader'\n\
    property in src/main/resouces/generator/sculptor-generator.properties\n\
    you can use any property from java, maven (-D) or sculptor in header text like\n\
    'user.name', 'os.version', 'os.name', 'db.product', 'project.nature', 'jpa.provider'\n\
    using \\${variable} syntax. These variables are replaced during build, for example:\n\
    \\${os.version}=${os.version}\n\
    \\${user.name}=${user.name}\n\
    \\${jpa.provider}=${jpa.provider}

# built-in validation annotation
validation.annotation.AssertFalse=javax.validation.constraints.AssertFalse
validation.annotation.AssertTrue=javax.validation.constraints.AssertTrue
validation.annotation.Digits=javax.validation.constraints.Digits
validation.annotation.Future=javax.validation.constraints.Future
validation.annotation.Max=javax.validation.constraints.Max
validation.annotation.Min=javax.validation.constraints.Min
validation.annotation.DecimalMax=javax.validation.constraints.DecimalMax
validation.annotation.DecimalMin=javax.validation.constraints.DecimalMin
validation.annotation.NotNull=javax.validation.constraints.NotNull
validation.annotation.Null=javax.validation.constraints.Null
validation.annotation.Past=javax.validation.constraints.Past
validation.annotation.Pattern=javax.validation.constraints.Pattern
validation.annotation.Size=javax.validation.constraints.Size
validation.annotation.Valid=javax.validation.Valid
validation.annotation.NotEmpty=javax.validation.constraints.NotEmpty
validation.annotation.NotBlank=javax.validation.constraints.NotBlank
validation.annotation.Email=javax.validation.constraints.Email

# built-in validation annotation (provider hibernate)
validation.annotation.CreditCardNumber=org.hibernate.validator.constraints.CreditCardNumber
validation.annotation.Range=org.hibernate.validator.constraints.Range
validation.annotation.Length=org.hibernate.validator.constraints.Length
validation.annotation.ScriptAssert=org.hibernate.validator.constraints.ScriptAssert
validation.annotation.URL=org.hibernate.validator.constraints.URL

# validation annotation for Joda API
validation.annotation.JodaFuture=org.sculptor.framework.validation.constraints.Future
validation.annotation.JodaPast=org.sculptor.framework.validation.constraints.Past

# default cascade values for aggregate references
cascade.aggregate=all
# bidirectional one-to-many for aggregate reference
cascade.aggregate.oneToMany=all-delete-orphan
# default cascade values for references within same module
# bidirectional many-to-many
cascade.manyToMany=all
# bidirectional one-to-many
cascade.oneToMany=all
# unidirectional to-many
cascade.toMany=all
# unidirectional to-one
cascade.toOne=all

check.repositoryFromOtherModule=true
check.cyclicDependencies=true
check.repositoryOnlyForAggregateRoot=true
check.extendSameType=true
check.repositoryNotForBasicType=true
check.basicTypeSingleValueReferences=true
check.aggregateReferences=true
check.keyNotManyReference=true
check.missingKeyInBasicType=true
check.bidirectionalValueObjectReferences=true
check.collectionType=true
check.orderByOnlyForBagOrList=true
check.inheritanceSingleTableAllNullable=true
check.lengthOnlyForStrings=true
check.primitivesNotNullable=true
check.relevantTypeForValidate=true
check.manyToManyOrderedList=true
check.referencesBetweenPersistenceUnits=true


umlgraph.bgcolor.Module=CCCCFF
umlgraph.bgcolor.Service=CCFF99
umlgraph.bgcolor.Consumer=CCFFFF
umlgraph.bgcolor.BasicType=D0D0D0
umlgraph.bgcolor.Enum=E0E0E0
umlgraph.bgcolor.Entity=FFCC33
umlgraph.bgcolor.ValueObject=FFFF99
umlgraph.bgcolor.DataTransferObject=FFCC99
umlgraph.bgcolor.DomainEvent=FFCC99
umlgraph.bgcolor.CommandEvent=FFFF99

# Highlight core domain with other colors
#umlgraph.fontcolor.core.Module=mediumblue
umlgraph.fontcolor.core.Service=mediumblue
umlgraph.fontcolor.core.Consumer=mediumblue
umlgraph.fontcolor.core.BasicType=mediumblue
umlgraph.fontcolor.core.Enum=mediumblue
umlgraph.fontcolor.core.Entity=mediumblue
umlgraph.bgcolor.core.Entity=FFCC66
umlgraph.fontcolor.core.ValueObject=mediumblue
umlgraph.bgcolor.core.ValueObject=FFFF99
umlgraph.fontcolor.core.DataTransferObject=mediumblue
umlgraph.fontcolor.core.DomainEvent=mediumblue
umlgraph.fontcolor.core.CommandEvent=mediumblue
umlgraph.labeldistance=2.0
umlgraph.labelangle=-30

# Default style for toString, see JavaDoc in org.apache.commons.lang3.builder.ToStringStyle
# It is also possible to define for individual DomainObject with hint="toStringStyle=SHORT_PREFIX_STYLE"
#toStringStyle=SHORT_PREFIX_STYLE
#toStringStyle=MULTI_LINE_STYLE
#toStringStyle=NO_FIELD_NAMES_STYLE
#toStringStyle=SIMPLE_STYLE

integration.product=simple
#integration.product=spring-integration
#integration.product=camel

# In the 'path' and 'return' you can use the following placeholders, which are replaced in generation time
# ${resourceName}
# ${operationName}
# ${p0}, ${p1}, ${p2} ... - operation parameter names
# In the 'return' you can use the following placeholders, which are replaced in runtime
# {id}
rest.default.path=/${resourceName}
rest.default.httpMethod=GET
#rest.default.return=redirect:/

rest.save.path=/${resourceName}
rest.save.httpMethod=POST
rest.save.return=redirect:/rest/${resourceName}/{id}
rest.create.path=/${resourceName}
rest.create.httpMethod=POST
rest.create.return=redirect:/rest/${resourceName}/{id}
rest.create.delegate=save
rest.update.path=/${resourceName}
rest.update.httpMethod=PUT
rest.update.return=redirect:/rest/${resourceName}/{id}
rest.update.delegate=save

rest.createForm.path=/${resourceName}/form
rest.createForm.httpMethod=GET
rest.createForm.return=${resourceName}/create

rest.updateForm.path=/${resourceName}/{id}/form
rest.updateForm.httpMethod=GET
rest.updateForm.return=${resourceName}/update

rest.delete.path=/${resourceName}/{id}
rest.delete.httpMethod=DELETE
rest.delete.return=redirect:/rest/${resourceName}
rest.delete.delegate=delete

rest.findById.path=/${resourceName}/{${p0}}
rest.findById.httpMethod=GET
rest.findById.return=${resourceName}/show
rest.findByKey.path=/${resourceName}/{${p0}}
rest.findByKey.httpMethod=GET
rest.findByKey.return=${resourceName}/show
rest.show.path=/${resourceName}/{${p0}}
rest.show.httpMethod=GET
rest.show.return=${resourceName}/show
rest.show.delegate=findById

rest.findAll.path=/${resourceName}
rest.findAll.httpMethod=GET
rest.findAll.return=${resourceName}/showlist
rest.showAll.path=/${resourceName}
rest.showAll.httpMethod=GET
rest.showAll.return=${resourceName}/showlist
rest.showAll.delegate=findAll

rest.scaffold.operations=show,showAll,createForm,create,delete
rest.notRequestParameter=Model,ModelMap,Map,BindingResult,HttpServletRequest,HttpServletResponse,HttpSession,WebRequest,Locale,java.io.InputStream,java.io.Reader,java.io.OutputStream,java.io.Writer,java.security.Principal,org.springframework.validation.Errors

# Format for exception error code. Parameters:
# 1 - Full class name e.g. "com.app.module.ActivityException"
# 2 - Class short name e.g. "ActivityException"
# 3 - Error code number e.g. 34 (integer)
# Examples: ERR%3$04d = ERR0034, %2$s-%3$02d = ActivityException-34
exception.code.formatWithParam=String.format("%1$s-%3$04d", CLASS_FULL_NAME, CLASS_NAME, errorCode)
# Instead of int errorCode you can define
# enum ErrorCode (or some other enum) in model
# and define the following two properties
#exception.code.enum=ErrorCode
#exception.code.formatWithParam=new java.util.Formatter().format("%1$s-%3$04d", CLASS_FULL_NAME, CLASS_NAME, errorCode.getValue()).toString()
# Format for error code without code parameter.
exception.code.format=CLASS_FULL_NAME

# Output slots
# define output path and overwrite (default false) for output slots
outputSlot.path.TO_SRC=src/main/java
outputSlot.path.TO_RESOURCES=src/main/resources
outputSlot.path.TO_GEN_SRC=src/generated/java
outputSlot.path.TO_GEN_RESOURCES=src/generated/resources
outputSlot.path.TO_SRC_TEST=src/test/java
outputSlot.path.TO_RESOURCES_TEST=src/test/resources
outputSlot.path.TO_GEN_SRC_TEST=src/test/generated/java
outputSlot.path.TO_GEN_RESOURCES_TEST=src/test/generated/resources
outputSlot.path.TO_WEBROOT=src/main/webapp
outputSlot.path.TO_DOC=src/site

outputSlot.overwrite.TO_GEN_SRC=true
outputSlot.overwrite.TO_GEN_RESOURCES=true
outputSlot.overwrite.TO_GEN_RESOURCES_TEST=true
outputSlot.overwrite.TO_GEN_SRC_TEST=true
outputSlot.overwrite.TO_DOC=true

# Cartridges enabled by default
cartridges=

# Package where override packages will be looked for
defaultOverridesPackage=generator

# To disable Java code formatting set to "false"
java.codeformatter.enabled=true

# To disable Java code formatters auto-import feature set to "false"
java.codeformatter.autoimport.enabled=true

# Abort if Java code formatter bails out due to invalid Java code
java.codeformatter.error.abort=false
